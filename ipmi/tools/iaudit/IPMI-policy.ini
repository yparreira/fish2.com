#
# IPMI configuration policy file
#
# Basic format is "[section]" for a given section, and then name=value
# pairs within a section, where the value is a regular expression 
# that signifies what I think is "more secure", perhaps, than the
# alternatives.
#

#
# "DEFAULT" allows interpolation from here to any other section
#
[DEFAULT]

#
# this gem thanks to http://stackoverflow.com/questions/406230/regular-expression-to-match-string-not-containing-a-word
# to search for don't match the text, use "^((?!Yes).)*$ "

[Rmcpplus_Conf_Privilege]
# really, really bad
Maximum_Privilege_Cipher_Suite_Id_0 = ^$

# only 3/8/12 should be used, really
Maximum_Privilege_Cipher_Suite_Id_1 = ^$
Maximum_Privilege_Cipher_Suite_Id_2 = ^$
Maximum_Privilege_Cipher_Suite_Id_4 = ^$
Maximum_Privilege_Cipher_Suite_Id_5 = ^$
Maximum_Privilege_Cipher_Suite_Id_6 = ^$
Maximum_Privilege_Cipher_Suite_Id_7 = ^$
Maximum_Privilege_Cipher_Suite_Id_9 = ^$
Maximum_Privilege_Cipher_Suite_Id_10 = ^$
Maximum_Privilege_Cipher_Suite_Id_11 = ^$
Maximum_Privilege_Cipher_Suite_Id_13 = ^$
Maximum_Privilege_Cipher_Suite_Id_14 = ^$
Maximum_Privilege_Cipher_Suite_Id_15 = ^$

[Lan_Conf_Misc]
Enable_Gratuitous_ARPs = No

[Lan_Conf]
#
# I really want static... but you can use the BIOS value,
# which I don't have access to.  At least make it not DHCP.
#
# Possible values: Unspecified/Static/Use_DHCP/Use_BIOS/Use_Others
#
IP_Address_Source = ^((?!DHCP).)*$

#
# Would like to check for the BMC using its own ethernet jack,
# but don't know how to easily check for it outside the OS.
#
# Without that, VLANs... well, use them, but... can't really check.
#
# Vlan_Id_Enable                                No
#
[PEF_Conf]
Enable_PEF                      = Yes
Enable_PEF_Event_Messages       = Yes
Enable_PEF_Alert_Startup_Delay  = No
Enable_Alert_Action             = Yes
Startup_Delay                   = 0
Alert_Startup_Delay             = 0

#
# from the bmc-config comments:
#
# The following configuration supports the ability for the BMC to disable a user 
# if a number of bad passwords are entered sequentially. 
# "Bad_Password_Threshold" determines the number of bad passwords that must be 
# entered sequentially. "Attempt_Count_Reset_Interval" determines the range of 
# time the bad passwords must occur in. "User_Lockout_Interval" determines the 
# time a user will be locked off if the bad password threshold is reached. If 
# set to "Yes", "Enable_Event_Message_When_User_Disabled" will inform the BMC to 
# log an event message when a user is disabled. 
#
[Lan_Conf_User_Security]
Bad_Password_Threshold = [1-9][0-9]*

[Lan_Channel]
Volatile_Enable_User_Level_Auth      = Yes
Volatile_Enable_Per_Message_Auth     = Yes
Volatile_Enable_Pef_Alerting         = Yes
Non_Volatile_Enable_User_Level_Auth  = Yes
Non_Volatile_Enable_Per_Message_Auth = Yes
Non_Volatile_Enable_Pef_Alerting     = Yes

[Serial_Channel]
Volatile_Enable_User_Level_Auth      = Yes
Volatile_Enable_Per_Message_Auth     = Yes
Volatile_Enable_Pef_Alerting         = Yes
Non_Volatile_Enable_User_Level_Auth  = Yes
Non_Volatile_Enable_Per_Message_Auth = Yes
Non_Volatile_Enable_Pef_Alerting     = Yes

#
# if SOL isn't turned on... have to filter these somehow - XXX
#
[SOL_Conf]
## Possible values: Yes/No
##  Enable_SOL                                    Yes
Force_SOL_Payload_Authentication = Yes
Force_SOL_Payload_Encryption     = Yes

#
# just don't have public here, please
#
[Community_String]
Community_String = ^((?!public).)*$ 

#
# really should look at alarms to see if they're
# actually going anywhere valid... at least not
# to 0.0.0.0 ;)  Ditto with the alert policies
# and filters.
#
# [Lan_Alert_Destination_0]
# [Section Alert_Policy_1]
# [Event_Filter_1]
#
# ....
#

[Lan_Conf_Security_Keys]
K_G = ^((?!0x0000000000000000000000000000000000000000).)*$

[Lan_Conf_Auth]
Callback_Enable_Auth_Type_MD2             = No
Callback_Enable_Auth_Type_OEM_Proprietary = No
User_Enable_Auth_Type_MD2                 = No

User_Enable_Auth_Type_MD2                 = No
Admin_Enable_Auth_Type_MD2                = No
OEM_Enable_Auth_Type_MD2                  = No
Operator_Enable_Auth_Type_MD2             = No
SOL_Payload_Access                        = Yes

Callback_Enable_Auth_Type_None            = No
User_Enable_Auth_Type_None                = No
Operator_Enable_Auth_Type_None            = No
Admin_Enable_Auth_Type_None               = No
OEM_Enable_Auth_Type_None                 = No


# SOL_Payload_Access            =  No
# SOL_Payload_Access            =  ^((?!No).)*$ 

[Rmcpplus_Conf_Privilege]

[Chassis_Boot_Flags]
User_Password_Bypass = No

#
# User checks
#
# XXX - list all, or ...
#
[User1]
Username = [A-z0-9].*
Serial_Enable_Link_Auth = Yes
[User2]
Username = [A-z0-9].*
Serial_Enable_Link_Auth = Yes
[User3]
Username = [A-z0-9].*
Serial_Enable_Link_Auth = Yes
[User4]
Username = [A-z0-9].*
Serial_Enable_Link_Auth = Yes
[User5]
Username = [A-z0-9].*
Serial_Enable_Link_Auth = Yes
[User6]
Username = [A-z0-9].*
Serial_Enable_Link_Auth = Yes
[User7]
Username = [A-z0-9].*
Serial_Enable_Link_Auth = Yes
[User8]
Username = [A-z0-9].*
Serial_Enable_Link_Auth = Yes
[User9]
Username = [A-z0-9].*
Serial_Enable_Link_Auth = Yes
Username = [A-z0-9].*
[User10]
Username = [A-z0-9].*
Serial_Enable_Link_Auth = Yes
[User11]
Username = [A-z0-9].*
Serial_Enable_Link_Auth = Yes
[User12]
Username = [A-z0-9].*
Serial_Enable_Link_Auth = Yes
[User13]
Username = [A-z0-9].*
Serial_Enable_Link_Auth = Yes
[User14]
Username = [A-z0-9].*
Serial_Enable_Link_Auth = Yes
[User15]
Username = [A-z0-9].*
Serial_Enable_Link_Auth = Yes
[User16]
Username = [A-z0-9].*
Serial_Enable_Link_Auth = Yes

